# This is the Cirrus CI control file used by cfbot to test proposed PostgreSQL 
# patches.  It is not part of the PostgreSQL source tree (though maybe one day
# it could be), but can be added to any branch for testing.

# cfbot.cputube.org

env:
  CIRRUS_CLONE_DEPTH: 1

# ====== FreeBSD ======
# TODO: backtrace on crash
# TODO: add more build options

task:
  name: FreeBSD
  freebsd_instance:
    image_family: freebsd-12-2
  env:
    CCACHE_SIZE: "500M"
    CCACHE_DIR: "/tmp/ccache_dir"
  ccache_cache:
    folder: "/tmp/ccache_dir"
  install_script:
    - uname -a
    - pkg install -y readline flex bison gmake perl5 p5-IPC-Run liblz4 ccache
  create_user_script:
    - pw useradd postgres
    - chown -R postgres:postgres .
    - mkdir -p /tmp/ccache_dir
    - chown -R postgres:postgres /tmp/ccache_dir
  build_script:
    - su postgres -c './configure --enable-cassert --enable-debug --enable-tap-tests --with-includes=/usr/local/include --with-libs=/usr/local/lib CC="ccache cc"'
    - su postgres -c 'make -s -j4'
  test_script:
    - su postgres -c 'make -s check-world'
  on_failure:
    initdb_logs_artifacts:
      path: "**/initdb.log"
      type: text/plain
    postmaster_logs_artifacts:
      path: "**/postmaster.log"
      type: text/plain
    regression_diffs_artifacts:
      path: "**/regression.diffs"
      type: text/plain
    tap_test_log_artifacts:
      path: "**/tmp_check/log/*"
      type: text/plain


# ====== macOS ======
#
# TODO: backtrace on crash
# TODO: Can't run check-world yet because of this:
#   connection to database failed: Unix-domain socket path "/private/var/folders/3y/l0z1x3693dl_8n0qybp4dqwh0000gn/T/cirrus-ci-build/src/bin/pg_upgrade/.s.PGSQL.58080" is too long (maximum 103 bytes)

task:
  name: macOS
  osx_instance:
    image: catalina-base
  install_script:
    - uname -a
    - cpan -T IPC::Run
  build_script:
    - export PERL5LIB=~/perl5/lib/perl5
    - ./configure --prefix=$HOME/install --enable-cassert --enable-debug --enable-tap-tests --without-readline
    - make -s -j12
    - make -s install
  test_script:
    - export PERL5LIB=~/perl5/lib/perl5
    - ulimit -c unlimited
    - make -s check
  on_failure:
    debug_script:
      - for corefile in $(find /cores/ -name 'core.*' 2>/dev/null) ; do lldb -c $corefile --batch -o 'thread backtrace all' -o 'quit' ; done
    initdb_logs_artifacts:
      path: "**/initdb.log"
      type: text/plain
    postmaster_logs_artifacts:
      path: "**/postmaster.log"
      type: text/plain
    regression_diffs_artifacts:
      path: "**/regression.diffs"
      type: text/plain
    tap_test_log_artifacts:
      path: "**/tmp_check/log/*"
      type: text/plain

# ====== Linux ======
# TODO: backtrace on crash
# TODO: use ccache and preserve ccache folder
# TODO: use a docker image so that we don't have to install all the packages every time

task:
  name: Linux
  container:
    image: debian:latest
  install_script:
    - uname -a
    - apt-get --yes update
    - DEBIAN_FRONTEND=noninteractive apt-get --yes install gcc libreadline-dev flex bison make perl libipc-run-perl clang llvm-dev libperl-dev libpython-dev tcl-dev libldap2-dev libicu-dev docbook-xml docbook-xsl fop libxml2-utils xsltproc krb5-admin-server krb5-kdc krb5-user slapd ldap-utils libssl-dev pkg-config locales-all liblz4-dev
  create_user_script:
    - useradd -m postgres
    - chown -R postgres:postgres .
  build_script:
    - su postgres -c './configure --enable-cassert --enable-debug --enable-tap-tests --with-tcl --with-python --with-perl --with-ldap --with-openssl --with-icu --with-llvm'
    - su postgres -c 'make -s -j4'
  docs_script:
    - su postgres -c 'make docs'
  test_script:
    - su postgres -c 'make -s check-world'
  on_failure:
    initdb_logs_artifacts:
      path: "**/initdb.log"
      type: text/plain
    postmaster_logs_artifacts:
      path: "**/postmaster.log"
      type: text/plain
    regression_diffs_artifacts:
      path: "**/regression.diffs"
      type: text/plain
    tap_test_log_artifacts:
      path: "**/tmp_check/log/*"
      type: text/plain

# ====== Windows ======
# This doesn't work.  I think it's the wrong version of Visual Studio and/or
# msbuild, but I don't understand Windows.  Help!

#task:
#  name: Windows
#  windows_container:
#    image: cirrusci/windowsservercore:cmake
#  install_script:
#    - choco install -y winflexbison activeperl diffutils
#    - rename c:\ProgramData\chocolatey\bin\win_flex.exe flex.exe
#    - rename c:\ProgramData\chocolatey\bin\win_bison.exe bison.exe
#    - choco install -y microsoft-build-tools
#  build_script:
#    - SET "PATH=%PATH%;C:\Perl64\bin;c:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\MSBuild\15.0\Bin"
#    - perl buildsetup.pl
#    - msbuild pgsql.sln
#  test_script:
#    - cd src\tools\msvc && vcregress check
